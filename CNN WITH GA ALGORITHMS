import os
import cv2
import numpy as np
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# ---------------- Load and preprocess dataset ---------------- #
def load_images(folder, image_size=(100, 100)):
    X, y = [], []
    class_names = sorted(os.listdir(folder))
    class_map = {cls: i for i, cls in enumerate(class_names)}

    for cls in class_names:
        cls_path = os.path.join(folder, cls)
        for img_name in os.listdir(cls_path):
            img_path = os.path.join(cls_path, img_name)
            img = cv2.imread(img_path)
            if img is not None:
                img = cv2.resize(img, image_size)
                X.append(img)
                y.append(class_map[cls])

    return np.array(X), np.array(y), class_map

dataset_path = r'C:\\Users\\shiva\\Downloads\\project\\train_set'
X, y, class_map = load_images(dataset_path)
X = X.astype('float32') / 255.0
y_cat = to_categorical(y)

X_train, X_test, y_train, y_test = train_test_split(X, y_cat, test_size=0.2, random_state=42)

# ---------------- GA for CNN optimization ---------------- #
class CustomGA:
    def __init__(self, fitness_func, pop_size=5, dim=2, lb=None, ub=None, mutation_rate=0.1, crossover_rate=0.7, generations=5):
        self.fitness_func = fitness_func
        self.pop_size = pop_size
        self.dim = dim
        self.lb = np.array(lb)
        self.ub = np.array(ub)
        self.mutation_rate = mutation_rate
        self.crossover_rate = crossover_rate
        self.generations = generations

    def _initialize_population(self):
        return np.random.uniform(self.lb, self.ub, (self.pop_size, self.dim))

    def _mutate(self, individual):
        for i in range(self.dim):
            if np.random.rand() < self.mutation_rate:
                individual[i] += np.random.uniform(-10, 10)
                individual[i] = np.clip(individual[i], self.lb[i], self.ub[i])
        return individual

    def _crossover(self, p1, p2):
        if np.random.rand() > self.crossover_rate:
            return p1.copy(), p2.copy()
        point = np.random.randint(1, self.dim)
        c1 = np.concatenate((p1[:point], p2[point:]))
        c2 = np.concatenate((p2[:point], p1[point:]))
        return c1, c2

    def solve(self):
        population = self._initialize_population()
        fitness = np.array([self.fitness_func(ind) for ind in population])
        best_idx = np.argmin(fitness)
        best_individual = population[best_idx].copy()
        best_fitness = fitness[best_idx]

        for gen in range(self.generations):
            new_population = []
            while len(new_population) < self.pop_size:
                idxs = np.random.choice(self.pop_size, 2, replace=False)
                p1, p2 = population[idxs[0]], population[idxs[1]]
                c1, c2 = self._crossover(p1, p2)
                c1 = self._mutate(c1)
                c2 = self._mutate(c2)
                new_population.extend([c1, c2])
            population = np.array(new_population[:self.pop_size])
            fitness = np.array([self.fitness_func(ind) for ind in population])

            gen_best_idx = np.argmin(fitness)
            if fitness[gen_best_idx] < best_fitness:
                best_fitness = fitness[gen_best_idx]
                best_individual = population[gen_best_idx].copy()

            print(f"Generation {gen+1}/{self.generations}, Best Accuracy: {-best_fitness:.4f}")

        return best_individual, best_fitness

# ---------------- Fitness function ---------------- #
def cnn_fitness(params):
    filters = int(np.clip(params[0], 16, 128))
    dense_units = int(np.clip(params[1], 32, 256))

    try:
        model = Sequential([
            Conv2D(filters, (3, 3), activation='relu', input_shape=(100, 100, 3)),
            MaxPooling2D((2, 2)),
            Flatten(),
            Dense(dense_units, activation='relu'),
            Dense(len(class_map), activation='softmax')
        ])
        model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
        model.fit(X_train, y_train, epochs=3, batch_size=32, verbose=0)
        loss, acc = model.evaluate(X_test, y_test, verbose=0)
        return -acc  # Minimize negative accuracy
    except Exception as e:
        print(f"⚠️ Invalid config ({filters}, {dense_units}): {e}")
        return 1.0

# ---------------- Run GA ---------------- #
ga = CustomGA(
    fitness_func=cnn_fitness,
    pop_size=6,
    dim=2,
    lb=[16, 32],
    ub=[128, 256],
    generations=5
)
best_pos, best_fit = ga.solve()

# ---------------- Final CNN model with best parameters ---------------- #
final_filters = int(best_pos[0])
final_dense = int(best_pos[1])
final_model = Sequential([
    Conv2D(final_filters, (3, 3), activation='relu', input_shape=(100, 100, 3)),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(final_dense, activation='relu'),
    Dense(len(class_map), activation='softmax')
])
final_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
final_model.fit(X_train, y_train, epochs=10, batch_size=32, verbose=1)
final_acc = final_model.evaluate(X_test, y_test)[1]

# ---------------- Save model ---------------- #
model_save_path = "final_cnn_ga_model.h5"
final_model.save(model_save_path)
print(f"✅ Final CNN Accuracy after GA: {final_acc:.4f}")
print(f"📁 Model saved to: {model_save_path}")
